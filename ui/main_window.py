import customtkinter as ctk
from ui.components.frame import Frame
from ui.components.label import Label
from ui.components.buttons import Button
from ui.buttons.notes.notes_view import NotesView
from ui.buttons.notes.add_notes import Add_Note
from ui.buttons.notes.manage_notes import ManageNotes
from ui.style import set_theme, get_color, get_font


# –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from ui.themes.theme_manager import ThemeManager
from ui.animations.transitions import AnimationManager
from ui.widgets.enhanced_button import EnhancedButton
from core.services.note_service import NoteService
from config.settings import SettingsManager

class MainWindow(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.settings_manager = SettingsManager()
        self.note_service = NoteService()
        self.animation_manager = AnimationManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
        self.current_theme_name = self.settings_manager.get('theme', 'light')
        set_theme(self.current_theme_name)
        ThemeManager.add_observer(self.on_theme_changed)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        self.after(100, self.on_theme_changed)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏


        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.title("Relieve Stress")
        width = self.settings_manager.get('window_width', 1200)
        height = self.settings_manager.get('window_height', 960)
        self.geometry(f"{width}x{height}")
        self.minsize(700, 850)
        self.configure(fg_color=get_color("COLOR_BG"))
        self.iconbitmap(self,"assets/icon.ico")
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
        self._create_widgets()

        # –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self._init_views()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        self.show_notes()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = Label(
            self,
            text="Relieve Stress",
            font=get_font("FONT_TITLE"),
            text_color=get_color("COLOR_TEXT")
        )
        self.title_label.pack(pady=(20, 15))

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        self.buttons_frame = Frame(
            self,
            fg_color=get_color("COLOR_FRAME_BG"),
            corner_radius=8
        )
        self.buttons_frame.pack(fill="x", padx=20, pady=(0, 15))

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.btn_show_notes = EnhancedButton(
            self.buttons_frame,
            text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏",
            command=self.show_notes,
            hover_animation=True
        )
        self.btn_show_notes.pack(side="left", padx=10, pady=5)

        self.btn_manage_notes = EnhancedButton(
            self.buttons_frame,
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏",
            command=self.show_manage_notes,
            hover_animation=True
        )
        self.btn_manage_notes.pack(side="left", padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ª–µ—Å–∞ —ç–º–æ—Ü–∏–π
        self.btn_emotion_wheel = EnhancedButton(
            self.buttons_frame,
            text="–ö–æ–ª–µ—Å–æ —ç–º–æ—Ü–∏–π",
            command=self.show_emotion_wheel,
            hover_animation=True
        )
        self.btn_emotion_wheel.pack(side="left", padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
        self.theme_toggle_btn = EnhancedButton(
            self.buttons_frame,
            text="üåô" if self.current_theme_name == "light" else "‚òÄÔ∏è",
            command=self.toggle_theme,
            width=40,
            hover_animation=True
        )
        self.theme_toggle_btn.pack(side="left", padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        self.exit_button = EnhancedButton(
            self.buttons_frame,
            text="–í—ã—Ö–æ–¥",
            command=self.on_exit,
            hover_animation=True
        )
        self.exit_button.pack(side="right", padx=10, pady=5)



    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π)
        self.content_frame = Frame(
            self,
            fg_color=get_color("COLOR_FRAME_BG"),
            corner_radius=8
        )
        self.content_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))

    def _init_views(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –Ω–µ—Ç
        self.current_view = None
        self.notes_view = None
        self.add_note_view = None
        self.manage_notes_view = None
        self.emotion_wheel_view = None

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f"{width}x{height}+{x}+{y}")

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π"""
        self.current_theme_name = "dark" if self.current_theme_name == "light" else "light"
        set_theme(self.current_theme_name)
        self.settings_manager.set('theme', self.current_theme_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        self.theme_toggle_btn.configure(
            text="üåô" if self.current_theme_name == "light" else "‚òÄÔ∏è"
        )
        self.animation_manager.scale_in(self.theme_toggle_btn, duration=0.2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ä–∞–∑—É
        self.on_theme_changed()
    
    def on_theme_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã —á–µ—Ä–µ–∑ ThemeManager"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ - –ì–õ–ê–í–ù–û–ï –û–ö–ù–û!
        self.configure(fg_color=get_color("COLOR_BG"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—Ä–µ–π–º—ã
        if hasattr(self, 'buttons_frame'):
            self.buttons_frame.configure(fg_color=get_color("COLOR_FRAME_BG"))
        if hasattr(self, 'content_frame'):
            self.content_frame.configure(fg_color=get_color("COLOR_FRAME_BG"))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if hasattr(self, 'title_label'):
            self.title_label.configure(
                text_color=get_color("COLOR_TEXT"),
                font=get_font("FONT_TITLE")
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        if hasattr(self, 'btn_show_notes'): buttons.append(self.btn_show_notes)
        if hasattr(self, 'btn_manage_notes'): buttons.append(self.btn_manage_notes)
        if hasattr(self, 'btn_emotion_wheel'): buttons.append(self.btn_emotion_wheel)
        if hasattr(self, 'theme_toggle_btn'): buttons.append(self.theme_toggle_btn)
        if hasattr(self, 'exit_button'): buttons.append(self.exit_button)
        
        for btn in buttons:
            if hasattr(btn, 'update_theme'):
                btn.update_theme()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        if self.current_view and hasattr(self.current_view, 'update_theme'):
            self.current_view.update_theme()
            
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.update()

    def clear_content(self):
        """–û—á–∏—â–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.content_frame.winfo_children():
            widget.destroy()
        self.current_view = None

    def show_notes(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏"""
        self.clear_content()
        self.notes_view = NotesView(
            self.content_frame,
            show_add_note=self.show_add_note
        )
        self.notes_view.pack(fill="both", expand=True, padx=10, pady=10)
        self.current_view = self.notes_view
        if self.settings_manager.get('animations_enabled', True):
            self.animation_manager.fade_in(self.notes_view, duration=0.3)

    def show_add_note(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
        self.clear_content()
        self.add_note_view = Add_Note(
            self.content_frame,
            on_note_added=self.on_note_added
        )
        self.add_note_view.pack(fill="both", expand=True, padx=10, pady=10)
        self.current_view = self.add_note_view
        if self.settings_manager.get('animations_enabled', True):
            self.animation_manager.slide_in(self.add_note_view, direction="right", duration=0.3)

    def on_note_added(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–º–µ—Ç–æ–∫
        self.show_notes()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if self.notes_view and hasattr(self.notes_view, 'note_text'):
            self.notes_view.note_text.configure(
                text="‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–º–µ—Ç–∫—É.",
                text_color=get_color("COLOR_SUCCESS")
            )

    def show_manage_notes(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏"""
        self.clear_content()
        self.manage_notes_view = ManageNotes(
            self.content_frame,
            on_update=self.on_notes_updated,
            on_add_note=self.show_add_note
        )
        self.manage_notes_view.pack(fill="both", expand=True, padx=10, pady=10)
        self.current_view = self.manage_notes_view
        self.manage_notes_view.refresh()
        if self.settings_manager.get('animations_enabled', True):
            self.animation_manager.slide_in(self.manage_notes_view, direction="left", duration=0.3)

    def on_notes_updated(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫"""
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        if self.manage_notes_view and hasattr(self.manage_notes_view, 'refresh'):
            self.manage_notes_view.refresh()

    def show_emotion_wheel(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–µ—Å–æ —ç–º–æ—Ü–∏–π"""
        from ui.views.emotion_wheel_view import EmotionWheelView
        
        self.clear_content()
        self.emotion_wheel_view = EmotionWheelView(self.content_frame)
        self.emotion_wheel_view.pack(fill="both", expand=True, padx=10, pady=10)
        self.current_view = self.emotion_wheel_view
        if self.settings_manager.get('animations_enabled', True):
            self.animation_manager.fade_in(self.emotion_wheel_view, duration=0.3)


    
    def on_exit(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        self.settings_manager.set('window_width', self.winfo_width())
        self.settings_manager.set('window_height', self.winfo_height())
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        ThemeManager.remove_observer(self.on_theme_changed)
        
        self.destroy()
