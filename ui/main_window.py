import customtkinter as ctk
from ui.components.frame import Frame
from ui.components.label import Label
from ui.buttons.notes.notes_view import NotesView
from ui.buttons.notes.add_notes import Add_Note
from ui.buttons.notes.manage_notes import ManageNotes
from ui.style import set_theme, get_color, get_font


# –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from ui.themes.theme_manager import ThemeManager
from ui.animations.transitions import AnimationManager
from ui.widgets.enhanced_button import EnhancedButton
from core.services.note_service import NoteService
from config.settings import SettingsManager

class MainWindow(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.settings_manager = SettingsManager()
        self.note_service = NoteService()
        self.animation_manager = AnimationManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
        self.current_theme_name = self.settings_manager.get('theme', 'light')
        set_theme(self.current_theme_name)
        ThemeManager.add_observer(self.on_theme_changed)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
        self._theme_update_pending = False


        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.title("Relieve Stress")
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        optimal_width = 900
        optimal_height = 650
        
        width = self.settings_manager.get('window_width', optimal_width)
        height = self.settings_manager.get('window_height', optimal_height)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–æ–º
        width = min(width, screen_width - 100)
        height = min(height, screen_height - 100)
        
        self.geometry(f"{width}x{height}")
        self.minsize(900, 650)
        self.configure(fg_color=get_color("COLOR_BG"))
        self.iconbitmap(self,"assets/icon.ico")
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._create_widgets()
        self._init_views()
        self.show_notes()
        self.center_window()

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = Label(
            self,
            text="Relieve Stress",
            font=get_font("FONT_TITLE"),
            text_color=get_color("COLOR_TEXT")
        )
        self.title_label.pack(pady=(20, 15))

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è)
        self.buttons_frame = Frame(
            self,
            fg_color=get_color("COLOR_FRAME_BG"),
            corner_radius=10,
            height=60
        )
        self.buttons_frame.pack(fill="x", padx=15, pady=(0, 10))
        self.buttons_frame.pack_propagate(False)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
        self.btn_show_notes = EnhancedButton(
            self.buttons_frame,
            text="üìö –ó–∞–º–µ—Ç–∫–∏",
            command=self.show_notes,
            hover_animation=True,
            height=40
        )
        self.btn_show_notes.pack(side="left", padx=5, pady=10, fill="x", expand=True)

        self.btn_manage_notes = EnhancedButton(
            self.buttons_frame,
            text="üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            command=self.show_manage_notes,
            hover_animation=True,
            height=40
        )
        self.btn_manage_notes.pack(side="left", padx=5, pady=10, fill="x", expand=True)


        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        self.btn_profile = EnhancedButton(
            self.buttons_frame,
            text="üë§ –ü—Ä–æ—Ñ–∏–ª—å",
            command=self.show_profile,
            hover_animation=True,
            height=40
        )
        self.btn_profile.pack(side="left", padx=5, pady=10, fill="x", expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        self.btn_ai_assistant = EnhancedButton(
            self.buttons_frame,
            text="ü§ñ AI",
            command=self.show_ai_assistant,
            hover_animation=True,
            height=40
        )
        self.btn_ai_assistant.pack(side="left", padx=5, pady=10, fill="x", expand=True)

        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
        self.theme_toggle_btn = EnhancedButton(
            self.buttons_frame,
            text="üåô" if self.current_theme_name == "light" else "‚òÄÔ∏è",
            command=self.toggle_theme,
            width=50,
            height=40,
            hover_animation=True
        )
        self.theme_toggle_btn.pack(side="right", padx=5, pady=10)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        self.exit_button = EnhancedButton(
            self.buttons_frame,
            text="‚ùå –í—ã—Ö–æ–¥",
            command=self.on_exit,
            hover_animation=True,
            width=80,
            height=40
        )
        self.exit_button.pack(side="right", padx=5, pady=10)



        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        self.content_frame = Frame(
            self,
            fg_color=get_color("COLOR_FRAME_BG"),
            corner_radius=10  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        )
        self.content_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))


    def _init_views(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –Ω–µ—Ç
        self.current_view = None
        self.notes_view = None
        self.add_note_view = None
        self.manage_notes_view = None
        self.emotion_wheel_view = None
        self.profile_view = None
        self.ai_assistant_view = None
        self.view_history = []  # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è —É–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        x = max(0, (screen_width - width) // 2)
        y = max(0, (screen_height - height) // 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        if x + width > screen_width:
            x = screen_width - width
        if y + height > screen_height:
            y = screen_height - height
            
        self.geometry(f"{width}x{height}+{x}+{y}")

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π"""
        self.current_theme_name = "dark" if self.current_theme_name == "light" else "light"
        set_theme(self.current_theme_name)
        self.settings_manager.set('theme', self.current_theme_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        self.theme_toggle_btn.configure(
            text="üåô" if self.current_theme_name == "light" else "‚òÄÔ∏è"
        )
        self.animation_manager.scale_in(self.theme_toggle_btn, duration=0.2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ä–∞–∑—É
        self.on_theme_changed()
    
    def on_theme_changed(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã."""
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if self._theme_update_pending:
            return
        self._theme_update_pending = True
        
        def update_theme():
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                self.configure(fg_color=get_color("COLOR_BG"))
                
                if hasattr(self, 'buttons_frame'):
                    self.buttons_frame.configure(fg_color=get_color("COLOR_FRAME_BG"))
                if hasattr(self, 'content_frame'):
                    self.content_frame.configure(fg_color=get_color("COLOR_FRAME_BG"))
                if hasattr(self, 'title_label'):
                    self.title_label.configure(text_color=get_color("COLOR_TEXT"))

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–¥–Ω–∏–º —Å–ø–∏—Å–∫–æ–º
                for attr_name in ['btn_show_notes', 'btn_manage_notes', 
                                'btn_profile', 'btn_ai_assistant', 'theme_toggle_btn', 'exit_button']:
                    if hasattr(self, attr_name):
                        btn = getattr(self, attr_name)
                        if hasattr(btn, 'update_theme'):
                            btn.update_theme()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                if self.current_view and hasattr(self.current_view, 'update_theme'):
                    self.current_view.update_theme()
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã: {e}")
            finally:
                self._theme_update_pending = False
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.after(10, update_theme)

    def clear_content(self):
        """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        for widget in self.content_frame.winfo_children():
            widget.destroy()
        self.current_view = None

    def show_notes(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏"""
        self.clear_content()
        self.notes_view = NotesView(
            self.content_frame,
            show_add_note=self.show_add_note
        )
        self.notes_view.pack(fill="both", expand=True, padx=5, pady=5)
        self._add_to_history(self.current_view)
        self.current_view = self.notes_view
        # –û—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    def show_add_note(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
        self.clear_content()
        self.add_note_view = Add_Note(
            self.content_frame,
            on_note_added=self.on_note_added,
            on_back=self._get_previous_view,
            on_home=self.show_notes
        )
        self.add_note_view.pack(fill="both", expand=True, padx=5, pady=5)
        self._add_to_history(self.current_view)
        self.current_view = self.add_note_view
        # –û—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    def on_note_added(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–º–µ—Ç–æ–∫
        self.show_notes()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if self.notes_view and hasattr(self.notes_view, 'note_text'):
            self.notes_view.note_text.configure(
                text="‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–º–µ—Ç–∫—É.",
                text_color=get_color("COLOR_SUCCESS")
            )

    def show_manage_notes(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏"""
        self.clear_content()
        self.manage_notes_view = ManageNotes(
            self.content_frame,
            on_update=self.on_notes_updated,
            on_add_note=self.show_add_note,
            on_back=self._get_previous_view,
            on_home=self.show_notes
        )
        self.manage_notes_view.pack(fill="both", expand=True, padx=5, pady=5)
        self._add_to_history(self.current_view)
        self.current_view = self.manage_notes_view
        self.manage_notes_view.refresh()
        # –û—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    def on_notes_updated(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫"""
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        if self.manage_notes_view and hasattr(self.manage_notes_view, 'refresh'):
            self.manage_notes_view.refresh()


    
    def show_profile(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from ui.views.profile_view import ProfileView
        
        self.clear_content()
        self.profile_view = ProfileView(
            self.content_frame,
            on_back=self._get_previous_view
        )
        self.profile_view.pack(fill="both", expand=True)
        self._add_to_history(self.current_view)
        self.current_view = self.profile_view
        # –û—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏


    
    def _add_to_history(self, view):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        if view and view != self.current_view:
            self.view_history.append(view)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 5 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            if len(self.view_history) > 5:
                self.view_history.pop(0)
    
    def _get_previous_view(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é."""
        if self.view_history:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            while self.view_history:
                prev_view = self.view_history.pop()
                if hasattr(prev_view, 'winfo_exists'):
                    try:
                        if prev_view.winfo_exists():
                            continue
                    except:
                        pass
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–∫—Ä–∞–Ω
                if hasattr(prev_view, '__class__'):
                    view_name = prev_view.__class__.__name__
                    if 'NotesView' in view_name:
                        self.show_notes()
                        return
                    elif 'ManageNotes' in view_name:
                        self.show_manage_notes()
                        return

                    elif 'AIAssistant' in view_name:
                        self.show_ai_assistant()
                        return
        
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–º–µ—Ç–∫–∞–º
        self.show_notes()
    
    def show_ai_assistant(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        from ui.views.ai_assistant_view import AIAssistantView
        
        self.clear_content()
        self.ai_assistant_view = AIAssistantView(
            self.content_frame,
            on_back=self._get_previous_view
        )
        self.ai_assistant_view.pack(fill="both", expand=True)
        self._add_to_history(self.current_view)
        self.current_view = self.ai_assistant_view
        # –û—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    def on_exit(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        self.settings_manager.set('window_width', self.winfo_width())
        self.settings_manager.set('window_height', self.winfo_height())
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        ThemeManager.remove_observer(self.on_theme_changed)
        
        self.destroy()
