"""–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞ —ç–º–æ—Ü–∏–π.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —ç–º–æ—Ü–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤.
"""

import customtkinter as ctk
from typing import Dict
from ui.views.base_view import BaseView
from core.services.emotion_service import EmotionService
from ui.style import get_color, get_font


class EmotionWheelView(BaseView):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞ —ç–º–æ—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤."""
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —ç–º–æ—Ü–∏–π
    _EMOTION_EMOJIS: Dict[str, str] = {
        "–ó–ª–æ—Å—Ç—å": "üò†",
        "–ì—Ä—É—Å—Ç—å": "üò¢",
        "–£—Å—Ç–∞–ª–æ—Å—Ç—å": "üò¥",
        "–†–∞–¥–æ—Å—Ç—å": "üòä",
        "–¢—Ä–µ–≤–æ–≥–∞": "üò∞",
        "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "üòå"
    }
    
    def __init__(self, parent):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞ —ç–º–æ—Ü–∏–π."""
        self.emotion_service = EmotionService()
        self.selected_emotion = ctk.StringVar()
        super().__init__(parent)
    
    def setup_ui(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self._create_header()
        self._create_emotion_wheel()
        self._create_result_area()
    
    def _create_header(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º."""
        header_frame = ctk.CTkFrame(self, fg_color="transparent")
        header_frame.pack(pady=20, fill="x")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            header_frame,
            text="üé≠ –ö–æ–ª–µ—Å–æ —ç–º–æ—Ü–∏–π üé≠",
            font=get_font("FONT_TITLE"),
            text_color=get_color("COLOR_TEXT")
        )
        title.pack()
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle = ctk.CTkLabel(
            header_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            font=get_font("FONT_NORMAL"),
            text_color=get_color("COLOR_TEXT_SECONDARY")
        )
        subtitle.pack(pady=(5, 0))
    
    def _create_emotion_wheel(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ–ª–µ—Å–æ —ç–º–æ—Ü–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        wheel_frame = ctk.CTkFrame(self, fg_color="transparent")
        wheel_frame.pack(pady=30)
        
        emotions = self.emotion_service.get_emotions()
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Ä—è–¥–∞
        for i, emotion in enumerate(emotions):
            self._create_emotion_button(wheel_frame, emotion, i)
    
    def _create_emotion_button(self, parent: ctk.CTkFrame, emotion: str, index: int) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —ç–º–æ—Ü–∏–∏."""
        color = self.emotion_service.get_emotion_color(emotion)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–µ—Ç–∫–µ
        row = 0 if index < 3 else 1
        col = index if index < 3 else index - 3
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–Ω—å—é
        btn_frame = ctk.CTkFrame(parent, fg_color="transparent")
        btn_frame.grid(row=row, column=col, padx=15, pady=15)
        
        # –¢–µ–Ω—å
        shadow = ctk.CTkFrame(
            btn_frame,
            fg_color=get_color("COLOR_DIVIDER"),
            width=140,
            height=80,
            corner_radius=20
        )
        shadow.place(x=3, y=3)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–º–æ—Ü–∏–∏
        btn = ctk.CTkButton(
            btn_frame,
            text=f"{self._get_emotion_emoji(emotion)}\n{emotion}",
            fg_color=color,
            hover_color=self._darken_color(color),
            font=get_font("FONT_NORMAL"),
            width=140,
            height=80,
            corner_radius=20,
            command=lambda e=emotion: self.select_emotion(e)
        )
        btn.pack()
        btn.lift()  # –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞–¥ —Ç–µ–Ω—å—é
    
    def _create_result_area(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        self.result_frame = ctk.CTkScrollableFrame(
            self,
            fg_color=get_color("COLOR_FRAME_BG"),
            corner_radius=15
        )
        self.result_frame.pack(pady=20, padx=20, fill="both", expand=True)
    
    def _get_emotion_emoji(self, emotion: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —ç–º–æ—Ü–∏–∏."""
        return self._EMOTION_EMOJIS.get(emotion, "üòê")
    
    def _darken_color(self, color: str) -> str:
        """–ó–∞—Ç–µ–º–Ω—è–µ—Ç —Ü–≤–µ—Ç –¥–ª—è hover-—ç—Ñ—Ñ–µ–∫—Ç–∞."""
        if not color.startswith('#') or len(color) != 7:
            return color
        
        try:
            # –ü–∞—Ä—Å–∏–º RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            r = max(0, int(color[1:3], 16) - 30)
            g = max(0, int(color[3:5], 16) - 30)
            b = max(0, int(color[5:7], 16) - 30)
            
            return f"#{r:02x}{g:02x}{b:02x}"
        except ValueError:
            return color
    
    def select_emotion(self, emotion: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–º–æ—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–≤–µ—Ç—ã."""
        self.selected_emotion.set(emotion)
        advice_data = self.emotion_service.get_emotion_advice(emotion)
        
        if not advice_data:
            return
        
        self._clear_result()
        self._display_emotion_advice(emotion, advice_data)
    
    def _display_emotion_advice(self, emotion: str, advice_data) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —ç–º–æ—Ü–∏–∏."""
        color = self.emotion_service.get_emotion_color(emotion)
        emoji = self._get_emotion_emoji(emotion)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ—Ü–∏–µ–π
        self._create_emotion_header(emotion, emoji, color)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–æ–≤–µ—Ç–∞–º–∏
        self._create_advice_cards(advice_data)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self._create_action_buttons(emotion)
    
    def _create_emotion_header(self, emotion: str, emoji: str, color: str) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —ç–º–æ—Ü–∏–∏."""
        header_card = ctk.CTkFrame(
            self.result_frame,
            fg_color=color,
            corner_radius=15
        )
        header_card.pack(fill="x", pady=(0, 20))
        
        result_title = ctk.CTkLabel(
            header_card,
            text=f"{emoji} {emotion} {emoji}",
            font=get_font("FONT_SUBTITLE"),
            text_color="white"
        )
        result_title.pack(pady=15)
    
    def _create_advice_cards(self, advice_data) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–æ–≤–µ—Ç–∞–º–∏."""
        cards_data = [
            ("üí°", "–°–æ–≤–µ—Ç", advice_data.advice, get_color("COLOR_SUCCESS")),
            ("üìú", "–¶–∏—Ç–∞—Ç–∞", f'"{advice_data.quote}"', get_color("COLOR_INFO")),
            ("üéØ", "–î–µ–π—Å—Ç–≤–∏–µ", advice_data.action, get_color("COLOR_WARNING"))
        ]
        
        for icon, title, text, card_color in cards_data:
            self._create_advice_card(icon, title, text, card_color)
    
    def _create_advice_card(self, icon: str, title: str, text: str, color: str) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–≤–µ—Ç–æ–º."""
        card = ctk.CTkFrame(
            self.result_frame,
            fg_color=get_color("COLOR_FRAME_BG"),
            corner_radius=12
        )
        card.pack(fill="x", pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        card_header = ctk.CTkFrame(card, fg_color=color, corner_radius=8)
        card_header.pack(fill="x", padx=15, pady=(15, 10))
        
        header_label = ctk.CTkLabel(
            card_header,
            text=f"{icon} {title}",
            font=get_font("FONT_NORMAL"),
            text_color="white"
        )
        header_label.pack(pady=8)
        
        # –¢–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        text_label = ctk.CTkLabel(
            card,
            text=text,
            font=get_font("FONT_SMALL"),
            text_color=get_color("COLOR_TEXT"),
            wraplength=450,
            justify="left"
        )
        text_label.pack(padx=20, pady=(0, 15), anchor="w")
    
    def _create_action_buttons(self, emotion: str) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
        buttons_frame = ctk.CTkFrame(self.result_frame, fg_color="transparent")
        buttons_frame.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞
        new_advice_btn = ctk.CTkButton(
            buttons_frame,
            text="üîÑ –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç",
            command=lambda: self.select_emotion(emotion),
            fg_color=get_color("COLOR_SUCCESS"),
            font=get_font("FONT_NORMAL"),
            height=40,
            corner_radius=20
        )
        new_advice_btn.pack(side="left", padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_btn = ctk.CTkButton(
            buttons_frame,
            text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —ç–º–æ—Ü–∏—é",
            command=self._clear_result,
            fg_color=get_color("COLOR_BUTTON_BG"),
            text_color=get_color("COLOR_TEXT"),
            font=get_font("FONT_NORMAL"),
            height=40,
            corner_radius=20
        )
        back_btn.pack(side="left", padx=10)
    
    def _clear_result(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        for widget in self.result_frame.winfo_children():
            widget.destroy()
    
    def update_theme(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.configure(fg_color=get_color("COLOR_FRAME_BG"))
        if hasattr(self, 'result_frame'):
            self.result_frame.configure(fg_color=get_color("COLOR_FRAME_BG"))