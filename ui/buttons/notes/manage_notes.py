import customtkinter as ctk
from ui.views.base_view import BaseView
from ui.widgets.enhanced_button import EnhancedButton
from ui.widgets.note_card import NoteCard
from ui.widgets.navigation_bar import NavigationBar
from ui.components.label import Label
from ui.components.frame import Frame
from ui.style import get_color, get_font
from core.services.note_service import NoteService
from ui.animations.transitions import AnimationManager

class ManageNotes(BaseView):
    def __init__(self, master, on_update=None, on_add_note=None, on_back=None, on_home=None, **kwargs):
        self.note_service = NoteService()
        self.on_update = on_update
        self.on_add_note = on_add_note
        self.on_back = on_back
        self.on_home = on_home
        self.selected_category = None
        self.current_edit_note_id = None
        super().__init__(master, **kwargs)

    def setup_ui(self):
        self.configure(fg_color=get_color("COLOR_FRAME_BG"))

        # –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if self.on_back or self.on_home:
            self.nav_bar = NavigationBar(
                self,
                title="üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏",
                on_back=self.on_back,
                on_home=self.on_home
            )
            self.nav_bar.pack(fill="x", padx=20, pady=(10, 0))

        # –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_frame = Frame(self, fg_color="transparent")
        self.actions_frame.pack(fill="x", padx=20, pady=10)

        self.add_btn = EnhancedButton(
            self.actions_frame,
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",
            command=self.open_add_note,
            fg_color=get_color("COLOR_SUCCESS"),
            hover_animation=True
        )
        self.add_btn.pack(side="left", padx=5)

        # –ü–∞–Ω–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.category_frame = Frame(self, fg_color="transparent")
        self.category_frame.pack(fill="x", padx=20, pady=10)

        self.category_label = Label(
            self.category_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            font=get_font("FONT_SUBTITLE"),
            text_color=get_color("COLOR_TEXT")
        )
        self.category_label.pack(anchor="w", pady=(0, 10))

        self.category_buttons_frame = Frame(self.category_frame, fg_color="transparent")
        self.category_buttons_frame.pack(fill="x")

        categories = self.note_service.get_categories()
        self.category_buttons = []
        
        for cat in categories:
            btn = EnhancedButton(
                self.category_buttons_frame,
                text=cat,
                command=lambda c=cat: self.select_category(c),
                fg_color=get_color("COLOR_BUTTON_BG"),
                hover_animation=True
            )
            btn.pack(side="left", padx=5, expand=True, fill="x")
            self.category_buttons.append(btn)

        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
        self.scrollable_frame = ctk.CTkScrollableFrame(
            self,
            fg_color=get_color("COLOR_FRAME_BG"),
            corner_radius=0
        )
        self.scrollable_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –û–±–ª–∞—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.edit_frame = Frame(
            self,
            fg_color=get_color("COLOR_FRAME_BG"),
            corner_radius=12,
            border_width=2,
            border_color=get_color("COLOR_INFO")
        )
        
        self.edit_title = Label(
            self.edit_frame,
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏",
            font=get_font("FONT_SUBTITLE"),
            text_color=get_color("COLOR_TEXT")
        )
        self.edit_title.pack(pady=15)
        
        self.edit_textbox = ctk.CTkTextbox(
            self.edit_frame,
            height=120,
            fg_color=get_color("COLOR_INPUT_BG"),
            text_color=get_color("COLOR_TEXT"),
            border_color=get_color("COLOR_INPUT_BORDER"),
            border_width=2,
            font=get_font("FONT_NORMAL"),
            corner_radius=8
        )
        self.edit_textbox.pack(padx=20, pady=10, fill="both", expand=True)
        self.edit_textbox.bind("<Control-v>", self.on_paste)
        self.edit_textbox.bind("<Control-c>", self.on_copy)
        self.edit_textbox.bind("<Control-a>", self.on_select_all)
        
        self.edit_buttons_frame = Frame(self.edit_frame, fg_color="transparent")
        self.edit_buttons_frame.pack(fill="x", padx=20, pady=15)
        
        self.save_edit_btn = EnhancedButton(
            self.edit_buttons_frame,
            text="‚úì –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=self.save_edit,
            fg_color=get_color("COLOR_SUCCESS"),
            hover_animation=True
        )
        self.save_edit_btn.pack(side="right", padx=5)
        
        self.cancel_edit_btn = EnhancedButton(
            self.edit_buttons_frame,
            text="‚úñ –û—Ç–º–µ–Ω–∞",
            command=self.cancel_edit,
            fg_color=get_color("COLOR_WARNING"),
            hover_animation=True
        )
        self.cancel_edit_btn.pack(side="right", padx=5)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(
            self,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫",
            font=get_font("FONT_NORMAL"),
            text_color=get_color("COLOR_TEXT_SECONDARY")
        )
        self.status_label.pack(pady=10)

    def select_category(self, category):
        self.selected_category = category
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for btn in self.category_buttons:
            is_active = btn.cget("text") == category
            btn.configure(
                fg_color=get_color("COLOR_ACCENT") if is_active else get_color("COLOR_BUTTON_BG")
            )
            if is_active:
                AnimationManager.scale_in(btn, duration=0.2)
        
        self.show_notes_for_category(category)
        self.status_label.configure(
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
            text_color=get_color("COLOR_INFO")
        )

    def show_notes_for_category(self, category):
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
        
        notes = self.note_service.get_notes(category)
        
        if not notes:
            no_notes_label = Label(
                self.scrollable_frame,
                text=f"–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'",
                font=get_font("FONT_NORMAL"),
                text_color=get_color("COLOR_TEXT_SECONDARY")
            )
            no_notes_label.pack(pady=50)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–º–µ—Ç–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for note in notes:
            note_frame = Frame(
                self.scrollable_frame,
                fg_color=get_color("COLOR_FRAME_BG"),
                corner_radius=8,
                border_width=1,
                border_color=get_color("COLOR_DIVIDER")
            )
            note_frame.pack(fill="x", pady=5, padx=10)
            
            # –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
            note_text = Label(
                note_frame,
                text=note.text,
                font=get_font("FONT_NORMAL"),
                text_color=get_color("COLOR_TEXT"),
                wraplength=400,
                justify="left"
            )
            note_text.pack(pady=10, padx=15, fill="x")
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons_frame = Frame(note_frame, fg_color="transparent")
            buttons_frame.pack(fill="x", padx=10, pady=(0, 10))
            
            edit_btn = EnhancedButton(
                buttons_frame,
                text="‚úèÔ∏è",
                width=30,
                height=30,
                command=lambda n=note: self.start_edit(n),
                fg_color=get_color("COLOR_INFO"),
                hover_animation=True
            )
            edit_btn.pack(side="left", padx=2)
            
            delete_btn = EnhancedButton(
                buttons_frame,
                text="üóëÔ∏è",
                width=30,
                height=30,
                command=lambda n=note: self.delete_note(n),
                fg_color=get_color("COLOR_ERROR"),
                hover_animation=True
            )
            delete_btn.pack(side="right", padx=2)
            
            favorite_btn = EnhancedButton(
                buttons_frame,
                text="‚òÖ" if note.is_favorite else "‚òÜ",
                width=30,
                height=30,
                command=lambda n=note: self.toggle_favorite(n),
                fg_color=get_color("COLOR_WARNING") if note.is_favorite else get_color("COLOR_BUTTON_BG"),
                hover_animation=True
            )
            favorite_btn.pack(side="right", padx=2)

    def start_edit(self, note):
        self.current_edit_note_id = note.id
        self.edit_textbox.delete("0.0", "end")
        self.edit_textbox.insert("0.0", note.text)
        self.edit_frame.pack(fill="x", padx=20, pady=10)
        AnimationManager.slide_in(self.edit_frame, direction="right", duration=0.1)
        
        self.status_label.configure(
            text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏...",
            text_color=get_color("COLOR_INFO")
        )

    def save_edit(self):
        if not self.current_edit_note_id:
            return
            
        new_text = self.edit_textbox.get("0.0", "end").strip()
        if not new_text:
            self.status_label.configure(
                text="‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!",
                text_color=get_color("COLOR_ERROR")
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        notes = self.note_service.get_notes()
        for note in notes:
            if note.id == self.current_edit_note_id:
                note.text = new_text
                break
        
        self.note_service.save_notes()
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cancel_edit()
        
        # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        self.show_notes_for_category(self.selected_category)
        
        self.status_label.configure(
            text="‚úì –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            text_color=get_color("COLOR_SUCCESS")
        )
        
        if self.on_update:
            self.on_update()
    
    def on_paste(self, event):
        """Ctrl+V - –≤—Å—Ç–∞–≤–∫–∞."""
        try:
            clipboard_text = self.clipboard_get()
            self.edit_textbox.insert("insert", clipboard_text)
        except:
            pass
        return "break"
    
    def on_copy(self, event):
        """Ctrl+C - –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        try:
            selected_text = self.edit_textbox.selection_get()
            self.clipboard_clear()
            self.clipboard_append(selected_text)
        except:
            pass
        return "break"
    
    def on_select_all(self, event):
        """Ctrl+A - –≤—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ."""
        self.edit_textbox.tag_add("sel", "1.0", "end")
        return "break"

    def cancel_edit(self):
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã–≤–∞–µ–º —Ñ—Ä–µ–π–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.edit_frame.pack_forget()
        self.edit_frame.place_forget()
        self.current_edit_note_id = None
        self.edit_textbox.delete("0.0", "end")
        self.status_label.configure(
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {self.selected_category}" if self.selected_category else "",
            text_color=get_color("COLOR_TEXT_SECONDARY")
        )

    def delete_note(self, note):
        if self.note_service.delete_note(note.id):
            self.show_notes_for_category(self.selected_category)
            self.status_label.configure(
                text="‚úì –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞",
                text_color=get_color("COLOR_SUCCESS")
            )
            if self.on_update:
                self.on_update()

    def toggle_favorite(self, note):
        if self.note_service.toggle_favorite(note.id):
            self.show_notes_for_category(self.selected_category)
            status_text = "‚òÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if not note.is_favorite else "‚òÜ –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
            self.status_label.configure(
                text=status_text,
                text_color=get_color("COLOR_INFO")
            )

    def open_add_note(self):
        if self.on_add_note:
            self.on_add_note()

    def refresh(self):
        self.note_service.load_notes()
        if self.selected_category:
            self.show_notes_for_category(self.selected_category)

    def update_theme(self):
        self.configure(fg_color=get_color("COLOR_FRAME_BG"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        if hasattr(self, 'nav_bar'):
            self.nav_bar.update_theme()
        
        if hasattr(self, 'title_label'):
            self.title_label.configure(
                text_color=get_color("COLOR_TEXT"),
                font=get_font("FONT_TITLE")
            )
        
        self.category_label.configure(
            text_color=get_color("COLOR_TEXT"),
            font=get_font("FONT_SUBTITLE")
        )
        
        self.scrollable_frame.configure(fg_color=get_color("COLOR_FRAME_BG"))
        
        self.edit_frame.configure(
            fg_color=get_color("COLOR_FRAME_BG"),
            border_color=get_color("COLOR_INFO")
        )
        
        self.edit_title.configure(
            text_color=get_color("COLOR_TEXT"),
            font=get_font("FONT_SUBTITLE")
        )
        
        self.edit_textbox.configure(
            fg_color=get_color("COLOR_INPUT_BG"),
            text_color=get_color("COLOR_TEXT"),
            border_color=get_color("COLOR_INPUT_BORDER")
        )
        
        self.status_label.configure(
            text_color=get_color("COLOR_TEXT_SECONDARY"),
            font=get_font("FONT_NORMAL")
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        self.add_btn.update_theme()
        for btn in self.category_buttons:
            btn.update_theme()
        self.save_edit_btn.update_theme()
        self.cancel_edit_btn.update_theme()