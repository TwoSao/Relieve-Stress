"""–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–º–µ—Ç–∫–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

import customtkinter as ctk
from typing import Optional, Callable
from ui.style import get_color, get_font
from ui.animations.transitions import AnimationManager
from core.models.note import Note


class NoteCard(ctk.CTkFrame):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    
    def __init__(self, parent: ctk.CTkBaseClass, note: Note, 
                 on_delete: Optional[Callable[[str], None]] = None,
                 on_favorite: Optional[Callable[[str], None]] = None, **kwargs):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–º–µ—Ç–∫–∏.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
            note: –û–±—ä–µ–∫—Ç –∑–∞–º–µ—Ç–∫–∏
            on_delete: –ö–æ–ª–ª–±—ç–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            on_favorite: –ö–æ–ª–ª–±—ç–∫ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        """
        super().__init__(parent, **kwargs)
        self.note = note
        self.on_delete = on_delete
        self.on_favorite = on_favorite
        self._setup_ui()
        self._setup_hover_effects()
    
    def _setup_ui(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ä—Ç–æ—á–∫–∏."""
        self.configure(
            fg_color=get_color("COLOR_FRAME_BG"),
            corner_radius=12,
            border_width=1,
            border_color=get_color("COLOR_DIVIDER")
        )
        
        self._create_text_area()
        self._create_control_panel()
    
    def _create_text_area(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –æ–±–ª–∞—Å—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–º–µ—Ç–∫–∏."""
        self.text_label = ctk.CTkLabel(
            self,
            text=self._truncate_text(self.note.text, 150),
            font=get_font("FONT_NORMAL"),
            text_color=get_color("COLOR_TEXT"),
            wraplength=300,
            justify="left",
            anchor="w"
        )
        self.text_label.pack(pady=10, padx=15, fill="x")
    
    def _create_control_panel(self) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        self.buttons_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.buttons_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        # –ú–µ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.category_label = ctk.CTkLabel(
            self.buttons_frame,
            text=f"#{self.note.category}",
            font=get_font("FONT_SMALL"),
            text_color=get_color("COLOR_TEXT_SECONDARY")
        )
        self.category_label.pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorite_text = "‚òÖ" if self.note.is_favorite else "‚òÜ"
        self.favorite_btn = ctk.CTkButton(
            self.buttons_frame,
            text=favorite_text,
            width=30,
            height=30,
            command=self._on_favorite_click,
            fg_color=get_color("COLOR_WARNING") if self.note.is_favorite else get_color("COLOR_BUTTON_BG"),
            hover_color=get_color("COLOR_WARNING") if not self.note.is_favorite else get_color("COLOR_BUTTON_HOVER")
        )
        self.favorite_btn.pack(side="right", padx=2)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        self.delete_btn = ctk.CTkButton(
            self.buttons_frame,
            text="üóëÔ∏è",
            width=30,
            height=30,
            command=self._on_delete_click,
            fg_color=get_color("COLOR_ERROR"),
            hover_color=get_color("COLOR_ERROR")
        )
        self.delete_btn.pack(side="right", padx=2)
    
    def _setup_hover_effects(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è."""
        self.bind("<Enter>", self._on_hover_enter)
        self.bind("<Leave>", self._on_hover_leave)
    
    def _on_hover_enter(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏."""
        self.configure(border_color=get_color("COLOR_ACCENT"))
        AnimationManager.scale_in(self, duration=0.1, scale_from=1.0, scale_to=1.02)
    
    def _on_hover_leave(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ö–æ–¥–∞ –º—ã—à–∏."""
        self.configure(border_color=get_color("COLOR_DIVIDER"))
        AnimationManager.scale_in(self, duration=0.1, scale_from=1.02, scale_to=1.0)
    
    def _on_favorite_click(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
        if self.on_favorite:
            self.on_favorite(self.note.id)
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._update_favorite_button()
    
    def _on_delete_click(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è."""
        if self.on_delete:
            self.on_delete(self.note.id)
    
    def _update_favorite_button(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
        favorite_text = "‚òÖ" if self.note.is_favorite else "‚òÜ"
        self.favorite_btn.configure(
            text=favorite_text,
            fg_color=get_color("COLOR_WARNING") if self.note.is_favorite else get_color("COLOR_BUTTON_BG")
        )
    
    @staticmethod
    def _truncate_text(text: str, max_length: int) -> str:
        """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
        return text[:max_length] + "..." if len(text) > max_length else text
    
    def update_theme(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–º—É –∫–∞—Ä—Ç–æ—á–∫–∏."""
        self.configure(
            fg_color=get_color("COLOR_FRAME_BG"),
            border_color=get_color("COLOR_DIVIDER")
        )
        
        self.text_label.configure(
            text_color=get_color("COLOR_TEXT"),
            font=get_font("FONT_NORMAL")
        )
        
        self.category_label.configure(
            text_color=get_color("COLOR_TEXT_SECONDARY"),
            font=get_font("FONT_SMALL")
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        self._update_favorite_button()
        self.delete_btn.configure(fg_color=get_color("COLOR_ERROR"))