from openai import OpenAI, RateLimitError, AuthenticationError, APIError, OpenAIError
from typing import List, Dict
import json
import os
import time
from datetime import datetime


class AssistantLogic:
    def __init__(self, api_key: str, model: str = "gpt-3.5-turbo"):
        self.client = OpenAI(api_key=api_key)  # –ù–æ–≤—ã–π —Å—Ç–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
        self.model = model
        self.last_request_time = 0
        self.min_interval = 3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫)

        self.conversation_history: List[Dict] = []

        self.assistant_instructions = (
            "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞. "
            "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º. "
            "–ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º, –ø—Ä–µ–¥–ª–∞–≥–∞—è —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏, "
            "–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ò–∑–±–µ–≥–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤."
        )

        os.makedirs("data/assistant", exist_ok=True)

    def get_response(self, user_message: str) -> str:
        now = time.time()

        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
        if now - self.last_request_time < self.min_interval:
            wait_time = round(self.min_interval - (now - self.last_request_time), 1)
            return f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."

        self.last_request_time = now
        self._add_to_history("user", user_message)

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": self.assistant_instructions},
                    *self._format_history()
                ],
                temperature=0.7
            )

            assistant_reply = response.choices[0].message.content
            self._add_to_history("assistant", assistant_reply)
            self._save_conversation()
            return assistant_reply

        except RateLimitError:
            return "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."

        except AuthenticationError:
            return "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ API –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π."

        except APIError:
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ OpenAI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

        except OpenAIError as e:
            print(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            return "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API."

        except Exception as e:
            print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return "‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    def _add_to_history(self, role: str, content: str):
        self.conversation_history.append({
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        })

    def _format_history(self) -> List[Dict]:
        return [
            {"role": item["role"], "content": item["content"]}
            for item in self.conversation_history[-6:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞-–æ—Ç–≤–µ—Ç–∞
        ]

    def _save_conversation(self):
        filename = f"data/assistant/conversation_{datetime.now().strftime('%Y%m%d')}.json"
        try:
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(self.conversation_history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
